{"meta":{"title":"NoMrXu's Blog","subtitle":"咔咔咔","description":"生活是美好的，非常好","author":"NoMrXu","url":"https://nomrxu.github.io","root":"/"},"pages":[],"posts":[{"title":"快捷键","slug":"快捷键","date":"2023-08-30T03:11:16.000Z","updated":"2023-08-30T03:13:02.313Z","comments":true,"path":"2023/08/30/快捷键/","link":"","permalink":"https://nomrxu.github.io/2023/08/30/%E5%BF%AB%E6%8D%B7%E9%94%AE/","excerpt":"这里可能找到神奇的快捷键","text":"这里可能找到神奇的快捷键 IDEA 在整个项目文件内查找——CTRL+H 根据文件名称查找——两下SHIFT PyCharm 在整个项目文件内查找——CTRL+SHIFT+F","categories":[],"tags":[]},{"title":"大数据","slug":"大数据","date":"2023-08-24T08:48:29.000Z","updated":"2023-08-25T02:59:08.627Z","comments":true,"path":"2023/08/24/大数据/","link":"","permalink":"https://nomrxu.github.io/2023/08/24/%E5%A4%A7%E6%95%B0%E6%8D%AE/","excerpt":"有些地方要去，有些大数据要学。","text":"有些地方要去，有些大数据要学。 ETL——抽取、转换、加载 数据仓库 阿里云大数据计算架构 概念 https://blog.csdn.net/wjt199866/article/details/115184169 ODS——（Operational Data Store）原始数据层，保持数据原貌，是作为数据库到数据仓库的一种过渡 DWD——（Data Warehouse Detail）明细数据层，是数据的归宿，这里保持这所有的从ODS到来的数据，并长期保存，而且这些数据不会被修改。 DWS——服务数据层 ADS——应用数据层 维度表——维度表示你要对数据进行分析时所用的一个量, 比如你要分析产品销售情况, 你可以选择按类别来进行分析,或按区域来分析. 这样的 “按..分析“ 就构成一个维度。 维度下钻：例子：如果我知道上海市的数据，但是我想查看各区的数据，维度级别变细，称为下钻，相反称为上卷。 事实表——是数据聚合后依据某个维度生成的结果表，是具体的统计表","categories":[],"tags":[]},{"title":"算法题","slug":"算法题","date":"2023-08-21T06:25:24.000Z","updated":"2023-08-24T07:12:49.049Z","comments":true,"path":"2023/08/21/算法题/","link":"","permalink":"https://nomrxu.github.io/2023/08/21/%E7%AE%97%E6%B3%95%E9%A2%98/","excerpt":"虽然不会经常写，但偶尔加一点。","text":"虽然不会经常写，但偶尔加一点。 滑动窗口 用两个数字\\(l,r\\)代表窗口的左右 \\(r\\)不断增大，直至不满足条件 \\(l\\)不断增大，直至重新满足条件 返回结果 （注意下标越界） 左右指针 当我们需要枚举数组中的两个元素时，随着第一个元素的递增，第二个元素递减，在排序之后，使用一左一右两个指针，向中间靠拢。 动态规划 \\[ P(i,j) \\] 状态转移方程是动态规划的关键（边界条件也很重要），通常有两个变量。想象一个二维数组是很有用的。 ⭐通常由两层循环组成，外层循环遍历length，内层循环遍历起始位置。区间长度由短至长，在计算长区间时可以利用之前计算过的短区间结果。","categories":[],"tags":[]},{"title":"厨神篇","slug":"厨神篇","date":"2023-08-21T02:50:21.000Z","updated":"2023-09-05T06:48:32.550Z","comments":true,"path":"2023/08/21/厨神篇/","link":"","permalink":"https://nomrxu.github.io/2023/08/21/%E5%8E%A8%E7%A5%9E%E7%AF%87/","excerpt":"从此刻开始，一名厨神踏上了征途。","text":"从此刻开始，一名厨神踏上了征途。 基本功 拿刀 右手大拇指与食指夹住刀身，剩余三指握住刀把，保持稳定。 左手以中指第一指关节抵住刀身，指尖内敛。 蒜蓉生菜 生菜剥好洗净 热油，加入蒜末到微黄（可以早点，不然直接爆油） 倒入生菜，开超 加入盐（酱油） 一会会就能出锅 涨蛋 鸡蛋打散，加盐 热油（一定要热，冒冒烟 倒鸡蛋，随便超超 出锅 番茄炒蛋 鸡蛋打散（加点盐？ 热油，倒鸡蛋 加番茄 加点水（一点点） 加盐、料酒、糖！！！ 加葱 出锅 手撕包菜 横切切两半，手撕，加盐清洗 大蒜、辣椒切碎 热油，爆香 下锅，放醋 加入盐、糖、鸡精、酱油 芹菜 菠菜 香菇青菜 糖醋排骨 毛豆炒青椒 蒜香豆芽","categories":[],"tags":[]},{"title":"Mongo","slug":"Mongo","date":"2023-08-01T06:45:05.000Z","updated":"2023-08-21T07:17:23.885Z","comments":true,"path":"2023/08/01/Mongo/","link":"","permalink":"https://nomrxu.github.io/2023/08/01/Mongo/","excerpt":"这里记录了工作中遇到的Mongo问题。","text":"这里记录了工作中遇到的Mongo问题。 Mongo查询的核心思想是流式查询，每一步都在对上一步的结果进行处理。$代表表中的值。 可以使用md.runSqlQuery(` `)试着执行SQL语句，不过可能会有意外的BUG 使用$field指代字段下的数据 $aggregate——聚合函数，里面可以放多种对数据的处理。根据每种处理的顺序执行，类似管道 ⭐$project——数据映射 {_id: 0}——不显示_id（_id会默认显示） ⭐ $match——数据过滤 使用$and或者$or来进行条件连接 $group——分组 $push将该分组下的数据插入，最终产生一个数组 {$sum:1}用于普通计数 日期 $dateToString $subtract $toDate","categories":[],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://nomrxu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"Vue学习","slug":"Vue学习","date":"2023-07-31T09:50:48.000Z","updated":"2023-08-04T08:31:12.214Z","comments":true,"path":"2023/07/31/Vue学习/","link":"","permalink":"https://nomrxu.github.io/2023/07/31/Vue%E5%AD%A6%E4%B9%A0/","excerpt":"这里记录了学习前端Vue的一些内容","text":"这里记录了学习前端Vue的一些内容 Vue Router 动态路由匹配——使用:id作为动态参数，并通过this.$route.params的属性获取 使用()来为匹配增加正则表达式限制 直接增加 +或* 来表示可重复的参数，需要使用数组传递——如 /first/second/third 123456789const User = { template: '&lt;div&gt;User&lt;/div&gt;',}// 这些都会传递给 `createRouter`const routes = [ // 动态字段以冒号开始 { path: '/users/:id', component: User },] 使用带有参数的路由时,相同的组件实例将被重复使用——组件的生命周期钩子不会被调用 可以使用watch 1234567891011const User = { template: '...', created() { this.$watch( () =&gt; this.$route.params, (toParams, previousParams) =&gt; { // 对路由变化做出响应... } ) },} 也可以使用beforeRouteUpdate 导航守卫 1234567const User = { template: '...', async beforeRouteUpdate(to, from) { // 对路由变化做出响应... this.userData = await fetchUser(to.params.id) },} $router.push和$router.replace区别在于是否会取代当前页面的历史记录 使用name来导航","categories":[],"tags":[{"name":"前端","slug":"前端","permalink":"https://nomrxu.github.io/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"医疗经验","slug":"医疗经验","date":"2023-07-31T02:32:47.000Z","updated":"2023-08-17T03:16:36.476Z","comments":true,"path":"2023/07/31/医疗经验/","link":"","permalink":"https://nomrxu.github.io/2023/07/31/%E5%8C%BB%E7%96%97%E7%BB%8F%E9%AA%8C/","excerpt":"这里记录了痛苦与经验。","text":"这里记录了痛苦与经验。 摔伤 生理盐水清洁伤口 棉签+碘伏消毒 纱布+医用胶布包扎 冰袋冰敷 过几天贴膏药或喷药活血化瘀","categories":[],"tags":[{"name":"生活","slug":"生活","permalink":"https://nomrxu.github.io/tags/%E7%94%9F%E6%B4%BB/"}]},{"title":"Py数据分析","slug":"Py数据分析","date":"2023-07-31T01:37:12.000Z","updated":"2023-08-22T08:03:08.538Z","comments":true,"path":"2023/07/31/Py数据分析/","link":"","permalink":"https://nomrxu.github.io/2023/07/31/Py%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/","excerpt":"这篇文章记录我学习Python数据分析的过程。","text":"这篇文章记录我学习Python数据分析的过程。 本文主要根据《跟着迪哥学Python数据分析与机器学习实战》学习。 正态分布 \\[ f(x)=\\frac{1}{\\sqrt{2\\pi}\\sigma}e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}} \\] image-20230815105502896 极大似然估计——利用已知的样本结果信息，反推最具有可能（最大概率）导致这些样本结果出现的模型参数值，换句话说，极大似然估计提供了一种给定观察数据来评估模型参数的方法，即：“模型已定，参数未知”。 数据预处理 样本不均衡 问题：模型可能认为所有数据都是正常的，难以检测出不正常数据的特征 解决： 下采样——让正常样本和异常样本一样少 例如异常样本有500，就提取500个正常样本。但是无法充分利用样本数据。 过采样——模拟生成新的异常样本 生成的异常样本可能不符合实际 SMOTE算法 对少数类中的每一个样本 特征标准化 问题：在一组样本中，可能某些特征数值变化很大，某些特征数值变化很小，但是有可能特征的重要性是一样的，不过是绝对值比较大。 解决：特征标准化（正态化）的公式如下 \\[ Z=\\frac{X-X_{mean}}{std(X)} \\] 其中，Z为标准化后的数据，X为原始数据 image-20230816104606367 训练方式 交叉验证 把训练集分成若干份，每次取其中一份作为验证集，其余作为训练集。 image-20230816165404175 正则化惩罚 目标——解决模型训练过程中的过拟合问题（模型在训练集上效果很好，但实际应用效果很差）。惩罚数值较大的权重参数。 L1正则化 \\[ J=J_0+\\alpha\\sum_w{|w|} \\] L2正则化 \\[ J=J_0+\\alpha\\sum_w{w^2} \\] 其中，\\(J\\)代表最终损失函数，\\(J_0\\)代表原始损失函数，第二项代表惩罚项，\\(\\alpha\\)代表惩罚系数，\\(w\\)代表特征系数 模型评估 TP、TN、FP、FN TP——结果正确，真被预测为真 TN——结果正确，假被预测为假 FP——结果错误，假被预测为真 FN——结果错误，真被预测为假 准确率（Accuracy）：表示分类问题中，做对的百分比 \\[ Accuracy=\\frac{TP+TN}{TP+TN+FP+FN} \\] 召回率（Recall）：表示正例中有多少能预测到 \\[ Recall=\\frac{TP}{TP+FN} \\] 精确度（Precision）：表示被分为正例中实际为正例的比例 \\[ P=\\frac{TP}{TP+FP} \\] 部分操作 数据切片 提取部分的列 12X = data.loc[:, data.columns != 'Class']y = data.loc[:, data.columns == 'Class'] 提取属性为特定值的index 12fraud_indices = np.array(data[data.Class == 1].index)normal_indices = np.array(data[data.Class == 0].index) 这里的Class是字段名称 根据下标数组提取行 1under_sample_data = data.loc[under_sample_indices, :]","categories":[],"tags":[{"name":"数据分析","slug":"数据分析","permalink":"https://nomrxu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"}]},{"title":"爬虫","slug":"爬虫","date":"2023-07-28T09:44:36.000Z","updated":"2023-08-14T06:39:31.850Z","comments":true,"path":"2023/07/28/爬虫/","link":"","permalink":"https://nomrxu.github.io/2023/07/28/%E7%88%AC%E8%99%AB/","excerpt":"爬虫是很好的东西，可以做到很多有意思的事情。","text":"爬虫是很好的东西，可以做到很多有意思的事情。 随想 爬虫的经典方式 使用Python自带的Requests库进行请求 使用Selenium进行脚本模拟 通常，使用Selenium会更加贴近人的操作方式，更加容易编程，躲避反爬机制。 Xpath 学习爬虫，要学会使用Xpath定位元素 表达式 意义 / 在下一层寻找（不会深入） // 在下面所有层寻找 @。。。 选择属性 div、a等元素名称 查找符合的元素 .. 父元素 * 匹配任何元素 [last() 最后一个 示例 //a[@id='nav_default'] 选取所有 a 元素，且这些元素的id属性值为nav_default Selenium 首先，你需要有Python，同时安装了selenium库，并且有浏览器（推荐是Chrome），并且下载了对应的chrome_driver驱动。 然后可以参考下图进行配置。其中implicitly_wait（隐式等待）是很重要的，这能帮助你在使用XPATH搜索元素时等待一段时间，避免程序太快而网页加载太慢。 12345678910111213141516171819class chrome: def __init__(self): chrome_driver_path = r'/chromedriver.exe' options = webdriver.ChromeOptions() options.add_argument('ignore-certificate-errors') options.add_argument('headless') self.driver = webdriver.Chrome(executable_path=chrome_driver_path, chrome_options=options) self.driver.implicitly_wait(30) def click(self, XPATH): button = WebDriverWait(driver=self.driver, timeout=10).until(EC.presence_of_element_located((By.XPATH, XPATH))) button.click() def input(self, XPATH, content): input = WebDriverWait(driver=self.driver, timeout=10).until(EC.presence_of_element_located((By.XPATH, XPATH))) input.send_keys(content) def get(self, URL): self.driver.get(URL) 实战脚本 爬取B站视频封面 12345678910111213141516171819202122232425262728293031# 使用selenium与requests进行b站视频爬取def BiliBili_Cover(URL, dir_name): if not os.path.exists(dir_name): os.mkdir(dir_name) base_url = URL ch = chrome() ch.get(base_url) pageNum = int(ch.driver.find_elements(By.XPATH, '//*[@id=\"submit-video-list\"]/ul[3]/li/a')[-2].text) print(pageNum) print(\"start!\") save_path = './' + dir_name + '/' for i in range(1, pageNum + 1): url = base_url + \"?pn=\" + str(i) ch.get(url) print(\"Page \" + str(i)) list_XPATH = '//*[@id=\"submit-video-list\"]/ul[2]' img_list = ch.driver.find_element(By.XPATH, list_XPATH) img_list = img_list.find_elements(By.XPATH, '//img') print(len(img_list)) for img in img_list: try: response = requests.get(img.get_attribute('src')) except: continue img_name = re.sub(r\"[\\/\\\\\\:\\*\\?\\\"\\&lt;\\&gt;\\|]\", \"_\", img.get_attribute('alt')) img_save_path = save_path + img_name + '.jpg' if img_name == '': continue with open(img_save_path, 'wb') as f: print(\"Save \" + img_name) f.write(response.content)","categories":[],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"https://nomrxu.github.io/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"随想","slug":"随想","date":"2023-07-26T02:28:15.000Z","updated":"2023-09-05T06:41:38.698Z","comments":true,"path":"2023/07/26/随想/","link":"","permalink":"https://nomrxu.github.io/2023/07/26/%E9%9A%8F%E6%83%B3/","excerpt":"这里是一段随想，记录每天的奇思妙想","text":"这里是一段随想，记录每天的奇思妙想 7.26 想起看过面膜老师的一个图，“四月是你的谎言（其实每个月都是）”，但重新找又找不到。 下次有空会做个爬虫把面膜老师的阿诺的视频封面和名称爬一下，还有诺学研究院的公众号 8.4 今天写代码，写错了地方，没有用原来的结构，新建了一个接口。但同事并灭有怪我，“能调用就行”。🤔这样真的好吗。 8.5 昨晚做了个很好的梦，我相信梦里的事情在未来会发生的。生活中总会有某个时刻感觉此情此景似乎见过。 听了回忆观影券，好想出去跑步😢，可惜不得。 8.9 眺望未来，珍惜当下。 8.21 copy——其实选择和谁在一起，就像是去海滩捡贝壳，我知道这广阔海边一定会有更美更好看的那一颗。但人的一生如此短暂，我已经捡到了属于我的那枚独一无二的。那么剩下的，就留给其他人吧 8.23 今日好歌推荐，偶然听见，突然爱上。Angel Of Mine❤ 8.29 总会有人发现你的价值，认可，给你带来快乐。😆 总有些惊奇的际遇~ 8.30 从生活中寻找甜蜜。🍬 9.4 日有所思，夜有所梦。🌙 爱己而后爱人。 9.5 心脏结实地跳动，让我感受到自己。","categories":[],"tags":[{"name":"生活","slug":"生活","permalink":"https://nomrxu.github.io/tags/%E7%94%9F%E6%B4%BB/"}]},{"title":"hexo使用","slug":"hexo使用","date":"2023-07-26T02:04:25.000Z","updated":"2023-08-23T09:29:48.628Z","comments":true,"path":"2023/07/26/hexo使用/","link":"","permalink":"https://nomrxu.github.io/2023/07/26/hexo%E4%BD%BF%E7%94%A8/","excerpt":"这里记录了我使用hexo的情况","text":"这里记录了我使用hexo的情况 Typora中的一些内容 摘录 在正文之前使用&lt;!--more--&gt;可以为文章添加摘录，例如 这里是一段摘录 &lt;!--more--&gt; 这里是正文 在文章开头添加excerpt属性也可以添加摘录 快捷键 CTRL+SHIFT+Q可以特殊标记 就像这样 ```可以配置代码块 1我是代码块 选中文字并且两次SHIFT+~可以为文字添加删除线 我被删除了 MiHo主题 一般都用hexo server启动服务后右击检查属性查找源码的对应位置 观察元素的属性配置查找对应的CSS 变量 MiHo主题的源码中，使用post指代文章 post 文章 config hexo目录下的_config.yml theme MiHo目录下的_config.yml 图片显示 最好把图片显示都改成相对路径，这样在本地测试时也能展示。比如文章封面图 Hexo 命令行 如果hexo deploy中出现Error: Spawn failed，就把.deploy_git删除重新部署。或者是因为网络连不上Git，换一个更稳定的网络。 公式块 首先替换hexo的渲染器，marked不支持mathjax 感谢大佬提供的渲染器 1234npm uninstall hexo-renderer-marked --savenpm uninstall hexo-math --savenpm install hexo-renderer-pandocnpm install hexo-renderer-mathjax --save 在主题配置文件中 12mathjax: enable: true 在文章元数据中 1mathjax: true 当然，如果使用hexo-renderer-kramed渲染器，可能会碰到http与https的问题，也许可以通过修改node_modules/hexo-renderer-mathjax/mathjax.html中的script修复，但我没试过。 图片 为文章开头的元数据增加 1typora-root-url: ../ 可以通过修改scaffolds/post.md进行统一配置 然后在source/下创建图片文件夹(例如images) 修改typora偏好设置 image-20230817110436988 Aplayer {% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %} title，author，url都是需要填写的。其中URL推荐使用在线网站的音乐（不推荐网易云等大平台，放不了会员歌曲，推荐找小众平台，放音乐前打开网络监控，查找类型为media的获取下载音乐的URL)。","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://nomrxu.github.io/tags/hexo/"}]}],"categories":[],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://nomrxu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"前端","slug":"前端","permalink":"https://nomrxu.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"生活","slug":"生活","permalink":"https://nomrxu.github.io/tags/%E7%94%9F%E6%B4%BB/"},{"name":"数据分析","slug":"数据分析","permalink":"https://nomrxu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"name":"爬虫","slug":"爬虫","permalink":"https://nomrxu.github.io/tags/%E7%88%AC%E8%99%AB/"},{"name":"hexo","slug":"hexo","permalink":"https://nomrxu.github.io/tags/hexo/"}]}